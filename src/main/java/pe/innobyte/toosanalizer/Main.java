/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pe.innobyte.toosanalizer;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

import pe.innobyte.toosanalizer.core.model.ActivitySample;
import pe.innobyte.toosanalizer.core.model.HeartModel;
import pe.innobyte.toosanalizer.core.model.SleepBlockData;
import pe.innobyte.toosanalizer.core.model.SleepModel;
import pe.innobyte.toosanalizer.core.model.StepsModel;
import pe.innobyte.toosanalizer.utils.*;

/**
 *
 * @author nik_1
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Index
     */
    public Main() {
        initComponents();
        
        enableSupportedActions();
        
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResult = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBlockSleep = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        textTTS = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtJSON = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        openJSON = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnLaunchApplication = new javax.swing.JButton();
        txtFile = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setAlignmentX(0.0F);
        jPanel2.setAlignmentY(0.0F);

        tableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Hours", "Intencity", "Raw-Kind", "Heart", "Steps"
            }
        ));
        jScrollPane1.setViewportView(tableResult);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Bloques de sue√±o :");

        tableBlockSleep.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableBlockSleep.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Inicio", "Fin", "asleep", "awake"
            }
        ));
        tableBlockSleep.setRowHeight(25);
        tableBlockSleep.setRowMargin(5);
        jScrollPane2.setViewportView(tableBlockSleep);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("TTS :");

        textTTS.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        txtJSON.setEditable(false);
        txtJSON.setColumns(20);
        txtJSON.setRows(5);
        jScrollPane3.setViewportView(txtJSON);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("JSON Generate by APP :");

        openJSON.setText("JSON");
        openJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJSONActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 132, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jScrollPane3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textTTS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openJSON)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textTTS)
                    .addComponent(openJSON))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Empleado :");

        txtNombre.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtNombre.setText("--");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(txtNombre)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtNombre))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)))
                .addContainerGap())
        );

        btnLaunchApplication.setBackground(new java.awt.Color(0, 153, 153));
        btnLaunchApplication.setForeground(new java.awt.Color(255, 255, 255));
        btnLaunchApplication.setText("RUN");
        btnLaunchApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchApplicationActionPerformed(evt);
            }
        });

        txtFile.setToolTipText("");

        btnFile.setBackground(new java.awt.Color(51, 153, 255));
        btnFile.setForeground(new java.awt.Color(255, 255, 255));
        btnFile.setText(". . .");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(txtFile, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLaunchApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLaunchApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLaunchApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchApplicationActionPerformed
        // TODO add your handling code here:
            sleepData.clear();
            blockData.clear();
            dataSleep.clear();

            
        model = (DefaultTableModel) tableBlockSleep.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        tableBlockSleep = new JTable(model);
        
        asleepTTS = 0;
        
        onLaunchDefaultApplication(evt);
    }//GEN-LAST:event_btnLaunchApplicationActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed

       onChooseFile(evt);
    }//GEN-LAST:event_btnFileActionPerformed

    private void openJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJSONActionPerformed
        try {
            // TODO add your handling code here:
            System.out.println(pathJSON);
            Runtime.getRuntime().exec( "notepad.exe "+pathJSON);


        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openJSONActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnLaunchApplication;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton openJSON;
    private javax.swing.JTable tableBlockSleep;
    private javax.swing.JTable tableResult;
    private javax.swing.JLabel textTTS;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextArea txtJSON;
    private javax.swing.JLabel txtNombre;
    // End of variables declaration//GEN-END:variables
    File file;
    JFileChooser fc = new JFileChooser();
 
    private static final long MINUTE_IN_MILLIS = 60000L;
    private final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS", Locale.getDefault());
    private final SimpleDateFormat formatHHMM = new SimpleDateFormat("HH:mm", Locale.getDefault());
    private final DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    private final ArrayList<HeartModel> heard = new ArrayList<>();
    private final ArrayList<StepsModel> steps = new ArrayList<>();
    private final List<SleepModel> sleepModelData = new ArrayList<>();
    private Date endTimeSleep = null;
    private boolean addedSleep = false;

    private final List<ActivitySample> sleepData = new ArrayList<>();
    private final List<SleepBlockData> blockData = new ArrayList<>();
    private final List<SleepModel> dataSleep = new ArrayList<>();
    private final JsonArray allDataSleep = new JsonArray();
    private int valueAvgHeart;
    private int numberItems;
    private int AgvSteps = 0;
    
    DefaultTableModel model = new DefaultTableModel();

    private void enableSupportedActions() {
        txtFile.setEnabled(true);
        btnLaunchApplication.setEnabled(true);
        btnFile.setEnabled(true);

    }
    
 
    private void onChooseFile(ActionEvent evt) {
        if (evt.getSource() == btnFile) {
            int returnVal = fc.showOpenDialog(Main.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
                txtFile.setText(file.getAbsolutePath());
            }
        }
    }
    
    private void disableActions() {
        txtFile.setEnabled(false);
        btnLaunchApplication.setEnabled(false);
        btnFile.setEnabled(false);
    }

   private String fileName;
    //--------------------------------------------------------------------------
    private void onLaunchDefaultApplication(ActionEvent evt) {
        fileName = txtFile.getText();
        File file = new File(fileName);

        //Create Workbook instance holding reference to .xlsx file
        try {
            
            Workbook workbook = WorkbookFactory.create(file);
            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.rowIterator();

            List<ActivitySample> data = new ArrayList<>(); // todo : A√±adir los datos del exel

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                if(row.getRowNum() == 0 && row.getCell(0) != null){
                    System.out.println("Empleado : "+ row.getCell(1).getNumericCellValue());
                  String employed = String.valueOf(row.getCell(1).getNumericCellValue());
                  txtNombre.setText(employed);
                }
          
                if (row.getRowNum() >= 5 && row.getCell(0) != null) {
                    data.add(new ActivitySample() {
                        @Override
                        public int getTimestamp() {
                            //System.out.println("Timestamp : "+(int) (row.getCell(0).getDateCellValue().getTime() / 1000L));
                            return (int) (row.getCell(0).getDateCellValue().getTime() / 1000L);
                        }

                        @Override
                        public int getKind() {
                           // System.out.println("Kind : "+(int) row.getCell(2).getNumericCellValue());
                            return (int) row.getCell(2).getNumericCellValue();
                        }

                        @Override
                        public float getIntensity() {
                           // System.out.println("Intensity : "+(float) row.getCell(1).getNumericCellValue());
                            return (float) row.getCell(1).getNumericCellValue();
                            //return Float.parseFloat(row.getCell(2).getStringCellValue());
                            //Object objdata = sheets.getRow(choosenRow).getCell(3).getStringCellValue();
                        }

                        @Override
                        public int getSteps() {
                            return (int) row.getCell(4).getNumericCellValue();
                        }

                        @Override
                        public int getHeartRate() {
                            return (int) row.getCell(3).getNumericCellValue();
                        }
                    });
                }
            }

            /* Importar clase ConvertBlocksSleep */
            ConvertBlocksSleep convertBlocks = new ConvertBlocksSleep();

            /* Procesar datos (Estructura el JSON)*/
            convertBlocks.processData(data);

            /* Obtener JSON */
            String JSON = convertBlocks.getJSONBlocksSleep().toString();

            saveJSONStoreDevice(fileName,JSON);


            ArrayList<ActivitySample> dataSet = new ArrayList<>(data); // Exel Data parse to ActivitySample class

            Collections.reverse(dataSet);
            
            List<ExelTable> exelData = new ArrayList<>();
            
            int key = 0;
            for (ActivitySample sample : dataSet) {
     
                if((sample.getKind() == 4 || sample.getKind() == 3 ) && (dataSet.size() == key+1) ){
                    checkTypeOfActivity(sample);
                } 
                key++;
                
                checkSleepLineTime(sample); 
               
               // UI add Row in table result data exel 

               Date rowDate = getDateFromSample(sample);
             
                exelData.add(new ExelTable(df.format(rowDate),
                    formatHHMM.format(rowDate),
                    sample.getIntensity(),
                    sample.getKind(), 
                    sample.getHeartRate(), 
                    sample.getHeartRate())); 
            }

            
                Collections.reverse(exelData); // UI inverce print data 
                ExelTableModel model = new ExelTableModel(exelData);
                tableResult.setModel(model);
                tableResult.setDefaultRenderer(ExelTable.class, new ExelTableRender());
      
            
        } catch (IOException | InvalidFormatException e) {
            e.printStackTrace();
        }


        /* group by summary date */
        Map<String, List<SleepBlockData>> map = new TreeMap<String, List<SleepBlockData>>();
        for (SleepBlockData data : blockData) {
            String key = data.getDateSummary();
            if (map.containsKey(key)) {
                List<SleepBlockData> block = map.get(key);
                block.add(data);
            } else {
                List<SleepBlockData> block = new ArrayList<>();
                block.add(data);
                map.put(key, block);
            }
        }



        for (Map.Entry<String, List<SleepBlockData>> day : map.entrySet()) {

            for (SleepBlockData sleep : day.getValue()) {
                for (ActivitySample sm : sleep.getSleepData()) {
                    schemeHeart(sm);
                    schemeStep(sm);
                    schemeSleep(sm);
                }

                
                addTableBlockSleep(day.getKey(),sleep.getStartDate(),sleep.getEndDate(),sleep.getSleepData());

                groupLevelSleep();
            }

      

            JsonObject thisDayJSON = schemaSleepOfDay(day.getKey());
            allDataSleep.add(thisDayJSON);
            // reset values this day
            dataSleep.clear();
            heard.clear();
            steps.clear();

        }
        
        txtJSON.setText(allDataSleep.toString());
        txtJSON.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        txtJSON.setLineWrap(true);
        txtJSON.setWrapStyleWord(true);
        
     //   saveJSONStoreDevice(fileName,allDataSleep.toString());

          textTTS.setText(getHM(asleepTTS));

    }

    long asleepTTS = 0;    long awakeTTS = 0;

    public void addTableBlockSleep(String key, Date startDate, Date endDate, List<ActivitySample> data){

        long asleep = 0;   long awake = 0;

        for(ActivitySample sleep : data){
            if(sleep.getKind() == 4){
                asleep ++;
            }
            if(sleep.getKind() == 3){
                awake ++;
            }
        }
        asleepTTS += asleep; awakeTTS += asleep;
        
        model.addRow(new Object[]{key,formatHHMM.format(startDate),formatHHMM.format(endDate),getHM(asleep),getHM(awake)});
    }
    
    String pathJSON ="";
    public void saveJSONStoreDevice(String nameFile,String data){
        try {
            File f = new File(nameFile+".json");
            pathJSON = f.getAbsoluteFile().toString();
            if(!f.exists()){
                f.createNewFile();
            }
            OutputStream inputStream = new FileOutputStream(f);
            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(inputStream);
            outputStreamWriter.write(data);
            outputStreamWriter.close();
        }catch (IOException e) {
            System.out.println("Exception File write failed: " + e.toString());
        }
    }
    

    private boolean isSleep(ActivitySample sample) {
        return sample.getKind() == 4 ||
                sample.getKind() == 3 ;
    }

    private Date getDateFromSample(ActivitySample sample) {
        return new Date(sample.getTimestamp() * 1000L);
    }

    // Generate scheme JSON 
    public JsonObject schemaSleepOfDay(String dateSummary) {
        JsonObject data = new JsonObject();

        JsonObject heartData = getHeartData(dateSummary);
        JsonObject sleepData = getSleepModelData(dateSummary);
        JsonObject stepData = getStepData(dateSummary);

        data.add("sleepData", sleepData);
        data.add("heartData", heartData);
        data.add("stepData", stepData);

        return data;
    }
    
    public void groupLevelSleep() {
        int index = 1;

        Collections.sort(sleepModelData, new Comparator<SleepModel>() {
            @Override
            public int compare(SleepModel o1, SleepModel o2) {
                return o1.getDatetime().compareTo(o2.getDatetime());
            }
        });

        String last_LevelSleep = sleepModelData.get(0).getLevel();
        Date last_TimeSleep = sleepModelData.get(0).getDatetime();
        long last_TotalSecondsLevel = sleepModelData.get(0).getSeconds();

        for (SleepModel sl : sleepModelData) {

            if (last_LevelSleep.equals(sl.getLevel())) {
                last_TotalSecondsLevel += sl.getSeconds();
            } else {

                SleepModel sm = new SleepModel();
                sm.setDatetime(last_TimeSleep);
                sm.setLevel(last_LevelSleep);
                sm.setSeconds(last_TotalSecondsLevel);
                dataSleep.add(sm);
                last_TotalSecondsLevel = sl.getSeconds();
                last_TimeSleep = sl.getDatetime();

            }

            if (sleepModelData.size() == index) {
                SleepModel sm = new SleepModel();
                sm.setDatetime(last_TimeSleep);
                sm.setLevel(last_LevelSleep);
                sm.setSeconds(last_TotalSecondsLevel);
                dataSleep.add(sm);
            }

            last_LevelSleep = sl.getLevel();
            index++;

        }
        sleepModelData.clear();
    }
    
    public void schemeHeart(ActivitySample sample) {
        String[] hours = (formatHHMM).format(getDateFromSample(sample)).split(":");
        int heartRate = sample.getHeartRate();
        if ((Integer.parseInt(hours[1]) % 10 == 5) || (Integer.parseInt(hours[1]) % 10 == 0)) {
            if (valueAvgHeart != 0) {
                heard.add(new HeartModel(getDateFromSample(sample), (valueAvgHeart / numberItems)));
                valueAvgHeart = 0;
                numberItems = 0;
            }
        } else {
            valueAvgHeart += heartRate;
            numberItems++;
        }
    }
    public void schemeStep(ActivitySample sample) {
        if (sample.getSteps() > 0) {
            AgvSteps += sample.getSteps();
        }

        String[] hours = (formatHHMM).format(getDateFromSample(sample)).split(":");
        if ((Integer.parseInt(hours[1]) % 10 == 5) || (Integer.parseInt(hours[1]) % 10 == 0)) {
            if (AgvSteps > 0) {
                steps.add(new StepsModel(getDateFromSample(sample), AgvSteps));
                AgvSteps = 0;
            }
        }

    }
    public void schemeSleep(ActivitySample sample) {
        SleepModel itemSleepModel = new SleepModel();

        if (isAwake(sample.getKind())) {
            itemSleepModel.setDatetime(getDateFromSample(sample));
            itemSleepModel.setLevel("awake");
            itemSleepModel.setSeconds(60); // *
        } else {
            itemSleepModel.setLevel("asleep");
            itemSleepModel.setSeconds(60); // *
            itemSleepModel.setDatetime(getDateFromSample(sample));
        }

        sleepModelData.add(itemSleepModel);
    }

    private JsonObject getStepData(String dateSummary) {
        JsonObject stepData = new JsonObject();

        JsonArray dataset = new JsonArray();
        for (StepsModel step : steps) {
            JsonObject itemStep = new JsonObject();
            itemStep.addProperty("time", format.format(step.getTime()));
            itemStep.addProperty("value", step.getValue()); //step.getValue()
            dataset.add(itemStep);
        }
        stepData.add("dataset", dataset);
        stepData.addProperty("scope", "step");
        stepData.addProperty("dateActivity", dateSummary);
        stepData.addProperty("datasetInterval", 5);
        stepData.addProperty("datasetType", "minute");

        return stepData;
    }
    private JsonObject getSleepModelData(String dateSummary) {


        JsonObject sleepDataArray = new JsonObject();
        JsonArray data = new JsonArray();

        Collections.sort(dataSleep, new Comparator<SleepModel>() {
            @Override
            public int compare(SleepModel o1, SleepModel o2) {
                return o1.getDatetime().compareTo(o2.getDatetime());
            }
        });

        long secondsAwake = 0,secondsSleep = 0,countSleep = 0,countAwake = 0;


        for (SleepModel sl : dataSleep) {

            JsonObject item = new JsonObject();
            item.addProperty("dateTime", format.format(sl.getDatetime()));
            item.addProperty("level", sl.getLevel());
            item.addProperty("seconds", sl.getSeconds());

            if (sl.getLevel().equals("awake")) {
                secondsAwake += sl.getSeconds();
                countAwake++;
            }
            if (sl.getLevel().equals("asleep")) {
                secondsSleep += sl.getSeconds();
                countSleep++;
            }
            data.add(item);

        }

        JsonObject awake = new JsonObject();
        awake.addProperty("count", countAwake);
        awake.addProperty("minutes", (secondsAwake / 60));
        awake.addProperty("thirtyDayAvgMinutes", 0);

        JsonObject asleep = new JsonObject();
        asleep.addProperty("count", countSleep);
        asleep.addProperty("minutes", (secondsSleep / 60));
        asleep.addProperty("thirtyDayAvgMinutes", 0);

        JsonObject sleepSummary = new JsonObject();
        sleepSummary.add("asleep", asleep);
        sleepSummary.add("awake", awake);

        JsonObject levels = new JsonObject();
        levels.add("data", data);
        levels.add("summary", sleepSummary);

        JsonObject details = new JsonObject();
        details.addProperty("duration", 0);
        details.addProperty("efficiency", 0);
        details.addProperty("isMainSleep", Boolean.TRUE);
        details.add("levels", levels);
        details.addProperty("logId", 0);
        details.addProperty("minutesAfterWakeup", 0);
        details.addProperty("minutesAsleep", (secondsSleep / 60));
        details.addProperty("minutesAwake", (secondsAwake / 60));
        details.addProperty("minutesToFallAsleep", 0);
        details.addProperty("startTime", format.format(dataSleep.get(0).getDatetime()));
        details.addProperty("timeInBed", (secondsSleep / 60));
        details.addProperty("type", "classic");

        JsonArray sleep = new JsonArray();
        sleep.add(details);
        sleepDataArray.add("sleep", sleep);


        JsonObject summary = new JsonObject();
        summary.addProperty("dateSummary", dateSummary);
        summary.addProperty("totalMinutesAsleep", (secondsSleep / 60));
        summary.addProperty("totalSleepRecords", countSleep);
        summary.addProperty("totalTimeInBed", 400);

        sleepDataArray.add("summary", summary);


        return sleepDataArray;
    }
    private JsonObject getHeartData(String dateSummary) {
        JsonObject heartData = new JsonObject();
        JsonArray dataset = new JsonArray();

        for (HeartModel hear : heard) {
            JsonObject item = new JsonObject();
            item.addProperty("time", format.format(hear.getTime()));
            item.addProperty("value", hear.getValue());
            dataset.add(item);
        }

        heartData.add("dataset", dataset);
        heartData.addProperty("scope", "heart");
        heartData.addProperty("dateActivity", dateSummary);
        heartData.addProperty("datasetInterval", 5);
        heartData.addProperty("datasetType", "minute");

        return heartData;
    }
    
    public boolean isAwake(float value) {
        return value == 3;
    }

    // end JSON scheme generate
    
    private void checkSleepLineTime(ActivitySample sample) {
        if (sample.getKind() == 4 || sample.getKind() == 3) {
            //------------- Sleep Period ----------//
            if (endTimeSleep == null) {
                endTimeSleep = getDateFromSample(sample);
                //System.out.println("End time :"+endTimeSleep.toString());
            }
            addedSleep = true;
            sleepData.add(sample);

        } else {
            checkTypeOfActivity(sample);
        }
    }
    
    public void checkTypeOfActivity(ActivitySample sample){
            if (addedSleep) {
                Date startTimeSleep = getDateFromSample(sample);
                // evaluate how many minutes of sleep there are
                long diff = ((endTimeSleep.getTime() - startTimeSleep.getTime()) / MINUTE_IN_MILLIS);
                if (diff >= 25) { // todo : Delimiter 25 minutes block sleep
                    String DateSummary = df.format(endTimeSleep);
                    // ++++++++++++++ add data ++++++++++++++++++++++++++++++
                    SleepBlockData sleepBlockData = new SleepBlockData();
                    sleepBlockData.setDateSummary(DateSummary);
                    sleepBlockData.setEndDate(endTimeSleep);
                    sleepBlockData.setStartDate(startTimeSleep);
                    sleepBlockData.getSleepData().addAll(sleepData);
                    blockData.add(sleepBlockData);
                    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++
                }
                //+++++++++++ cut block +++++++++++
                addedSleep = false;
                sleepData.clear();
                //+++++++++++++++++++++++++++++++++
            }        
            endTimeSleep = null;
    }

    private String getHM(long value) {
        return DateTimeUtils.formatDurationHoursMinutes(value, TimeUnit.MINUTES);
    }


}
